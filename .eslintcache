[{"C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\index.tsx":"1","C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\App.tsx":"3","C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\components\\pages\\TodoPage\\index.tsx":"4","C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\components\\atoms\\TodoForm\\index.tsx":"5","C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\components\\atoms\\TodoItem\\index.tsx":"6"},{"size":530,"mtime":1611072726000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1611071982000,"results":"9","hashOfConfig":"8"},{"size":161,"mtime":1611117958235,"results":"10","hashOfConfig":"8"},{"size":1601,"mtime":1611126068329,"results":"11","hashOfConfig":"8"},{"size":1070,"mtime":1611142651027,"results":"12","hashOfConfig":"8"},{"size":2280,"mtime":1611141889706,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1bmxqwm",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\index.tsx",[],["29","30"],"C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\App.tsx",[],"C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\components\\pages\\TodoPage\\index.tsx",["31","32","33","34","35"],"import { Button, Input, List } from \"antd\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport TodoForm from \"../../atoms/TodoForm\";\nimport TodoItem, { ITodoItem } from \"../../atoms/TodoItem\";\n\nexport interface TodoAppProps { }\n\nconst TodoApp: FC<TodoAppProps> = ({ }) => {\n  const [counter, setCounter] = useState(1);\n  const [todoList, setTodoList] = useState<ITodoItem[]>([]);\n\n  const onDone = (itemId: string) => {\n    const tempList = todoList.map((item) => {\n      if (item.id === itemId) item.status = \"Done\";\n      return item;\n    });\n    setTodoList([...tempList]);\n  };\n\n  const onRemove = (itemId: string) => {\n    const tempList = todoList.filter((item) => {\n      return item.id !== itemId;\n    });\n    setTodoList([...tempList]);\n  };\n\n  const onAdd = (description: string) => {\n    const tempItem: ITodoItem = {\n      id: counter.toString(),\n      description: description,\n      status: \"Pending\",\n    };\n    setTodoList([...todoList, tempItem]);\n    setCounter(counter + 1);\n  };\n\n  return (\n    <div className=\"todoContainer\" >\n      <h1 className=\"mb-20 mt-3 text-5xl text-teal-600 underline font-mono text-lg\">TODO App</h1>\n      <TodoForm handleAdd={onAdd} />\n      {todoList.map((todoItem, index) => {\n        return (\n          <TodoItem\n            key={index}\n            id={todoItem.id}\n            description={todoItem.description}\n            status={todoItem.status}\n            createdAt={todoItem.createdAt}\n            handleDone={onDone}\n            handleRemove={onRemove}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TodoApp;\n","C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\components\\atoms\\TodoForm\\index.tsx",[],"C:\\Users\\Romesh\\Desktop\\codePlayGround\\todo-app\\src\\components\\atoms\\TodoItem\\index.tsx",["36","37","38"],"import { Button, List } from \"antd\";\nimport React, { FC } from \"react\";\nimport { CloseCircleFilled, CheckCircleTwoTone } from '@ant-design/icons';\n\nexport interface ITodoItem {\n  id: string;\n  description: string;\n  status: \"Done\" | \"Pending\";\n  createdAt?: number;\n}\n\nexport interface TodoItemProps extends ITodoItem {\n  handleDone: (id: string) => any;\n  handleRemove: (id: string) => any;\n}\n\nconst TodoItem: FC<TodoItemProps> = ({\n  id,\n  description,\n  status,\n  createdAt,\n  handleDone,\n  handleRemove,\n}) => {\n  return (\n    <div className=\"toDoItem-container\">\n      <div className={`flex space-x-4 ... ${status === 'Done' ? \"completed\" : ''}`}>\n        <div className=\"flex-1 ...\" >\n          <div className=\"flex flex-row ...\" style={{ paddingTop: \"1em\" }}>\n            {/* <div>{id}</div> */}\n            <div>\n              {status === \"Done\" ? <CheckCircleTwoTone style={{ marginRight: \"1em\", fontSize: '2em', color: '#10b981' }} /> : null}\n            </div>\n            <div className=\"todo-description\">Description: {description}</div>\n          </div>\n        </div>\n        <div className=\"flex-2 ...\">\n          <div className=\"inline-block ...\">\n            {status === \"Pending\" ? <button\n              type=\"button\"\n              className=\"border border-green-500 text-green-500 rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:text-white hover:bg-green-600 focus:outline-none focus:shadow-outline\"\n              onClick={() => {\n                handleDone(id);\n              }}\n            >\n              Mark as Done\n          </button>\n              : null}\n          </div>\n          <div className=\"inline-block ...\">\n            <button\n              type=\"button\"\n              className=\"border border-red-500 text-red-500 rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:text-white hover:bg-red-600 focus:outline-none focus:shadow-outline\"\n              // icon={<DeleteOutlined />}\n              // className=\"todo-action-button\"\n              onClick={() => {\n                handleRemove(id);\n              }}\n            >\n              {/* <CloseCircleFilled /> */}\n              Remove\n          </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":16},{"ruleId":"43","severity":1,"message":"47","line":1,"column":18,"nodeType":"45","messageId":"46","endLine":1,"endColumn":23},{"ruleId":"43","severity":1,"message":"48","line":1,"column":25,"nodeType":"45","messageId":"46","endLine":1,"endColumn":29},{"ruleId":"43","severity":1,"message":"49","line":2,"column":31,"nodeType":"45","messageId":"46","endLine":2,"endColumn":40},{"ruleId":"50","severity":1,"message":"51","line":8,"column":36,"nodeType":"52","messageId":"53","endLine":8,"endColumn":39},{"ruleId":"43","severity":1,"message":"44","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":16},{"ruleId":"43","severity":1,"message":"48","line":1,"column":18,"nodeType":"45","messageId":"46","endLine":1,"endColumn":22},{"ruleId":"43","severity":1,"message":"54","line":3,"column":10,"nodeType":"45","messageId":"46","endLine":3,"endColumn":27},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'List' is defined but never used.","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'CloseCircleFilled' is defined but never used.","no-global-assign","no-unsafe-negation"]