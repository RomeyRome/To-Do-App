{"version":3,"sources":["components/atoms/TodoForm/index.tsx","components/atoms/TodoItem/index.tsx","components/pages/TodoPage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForm","handleAdd","useState","description","setDescription","className","placeholder","value","onChange","event","target","type","disabled","onClick","TodoItem","id","status","handleDone","createdAt","handleRemove","style","paddingTop","CheckCircleTwoTone","marginRight","fontSize","color","TodoApp","counter","setCounter","todoList","setTodoList","onDone","itemId","tempList","map","item","onRemove","filter","tempItem","toString","todoItem","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAyCeA,EAlCqB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACfC,mBAAS,IADM,mBAC9CC,EAD8C,KACjCC,EADiC,KAGrD,OACE,qBAAKC,UAAU,qBAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,IAAD,CACEA,UAAU,aACVC,YAAY,yBACZC,MAAOJ,EACPK,SAAU,SAACC,GACTL,EAAeK,EAAMC,OAAOH,YAIlC,qBAAKF,UAAU,aAAf,SACE,cAAC,IAAD,CACEM,KAAK,UACLN,UAAU,gBACVO,SAA0B,KAAhBT,EACVU,QAAS,WACPZ,EAAUE,GACVC,EAAe,KANnB,8B,QC6CKU,EArDqB,SAAC,GAO9B,IANLC,EAMI,EANJA,GACAZ,EAKI,EALJA,YACAa,EAII,EAJJA,OAEAC,GAEI,EAHJC,UAGI,EAFJD,YACAE,EACI,EADJA,aAEA,OACE,qBAAKd,UAAU,qBAAf,SACE,sBAAKA,UAAS,6BAAmC,SAAXW,EAAoB,YAAc,IAAxE,UACE,qBAAKX,UAAU,aAAf,SACE,sBAAKA,UAAU,oBAAoBe,MAAO,CAAEC,WAAY,OAAxD,UAEE,8BACc,SAAXL,EAAoB,cAACM,EAAA,EAAD,CAAoBF,MAAO,CAAEG,YAAa,MAAOC,SAAU,MAAOC,MAAO,aAAkB,OAElH,sBAAKpB,UAAU,mBAAf,0BAAgDF,UAGpD,sBAAKE,UAAU,aAAf,UACE,qBAAKA,UAAU,mBAAf,SACc,YAAXW,EAAuB,wBACtBL,KAAK,SACLN,UAAU,uLACVQ,QAAS,WACPI,EAAWF,IAJS,0BASpB,OAEN,qBAAKV,UAAU,mBAAf,SACE,wBACEM,KAAK,SACLN,UAAU,iLAGVQ,QAAS,WACPM,EAAaJ,IANjB,+BCOGW,EAlDmB,SAAC,GAAS,qBACZxB,mBAAS,GADE,mBAClCyB,EADkC,KACzBC,EADyB,OAET1B,mBAAsB,IAFb,mBAElC2B,EAFkC,KAExBC,EAFwB,KAInCC,EAAS,SAACC,GACd,IAAMC,EAAWJ,EAASK,KAAI,SAACC,GAE7B,OADIA,EAAKpB,KAAOiB,IAAQG,EAAKnB,OAAS,QAC/BmB,KAETL,EAAY,YAAIG,KAGZG,EAAW,SAACJ,GAChB,IAAMC,EAAWJ,EAASQ,QAAO,SAACF,GAChC,OAAOA,EAAKpB,KAAOiB,KAErBF,EAAY,YAAIG,KAalB,OACE,sBAAK5B,UAAU,gBAAf,UACE,oBAAIA,UAAU,gEAAd,sBACA,cAAC,EAAD,CAAUJ,UAbA,SAACE,GACb,IAAMmC,EAAsB,CAC1BvB,GAAIY,EAAQY,WACZpC,YAAaA,EACba,OAAQ,WAEVc,EAAY,GAAD,mBAAKD,GAAL,CAAeS,KAC1BV,EAAWD,EAAU,MAOlBE,EAASK,KAAI,SAACM,EAAUC,GACvB,OACE,cAAC,EAAD,CAEE1B,GAAIyB,EAASzB,GACbZ,YAAaqC,EAASrC,YACtBa,OAAQwB,EAASxB,OACjBE,UAAWsB,EAAStB,UACpBD,WAAYc,EACZZ,aAAciB,GANTK,U,MCnCFC,MAJf,WACE,OAAO,cAAC,EAAD,KCSMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ee433d56.chunk.js","sourcesContent":["import { Button, Input } from \"antd\";\nimport React, { FC, useState } from \"react\";\n\nexport interface TodoFormProps {\n  handleAdd: (description: string) => any;\n}\n\nconst TodoForm: FC<TodoFormProps> = ({ handleAdd }) => {\n  const [description, setDescription] = useState(\"\");\n\n  return (\n    <div className=\"toDoList-container\">\n      <div className=\"flex space-x-4 ...\">\n        <div className=\"flex-1 ...\">\n          <Input\n            className=\"todo-input\"\n            placeholder=\"What needs to be done?\"\n            value={description}\n            onChange={(event) => {\n              setDescription(event.target.value);\n            }}\n          />\n        </div>\n        <div className=\"flex-2 ...\">\n          <Button\n            type=\"primary\"\n            className=\"addToDoButton\"\n            disabled={description === \"\"}\n            onClick={() => {\n              handleAdd(description);\n              setDescription(\"\");\n            }}\n          >\n            Add Todo\n        </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoForm;\n","import { Button, List } from \"antd\";\nimport React, { FC } from \"react\";\nimport { CloseCircleFilled, CheckCircleTwoTone } from '@ant-design/icons';\n\nexport interface ITodoItem {\n  id: string;\n  description: string;\n  status: \"Done\" | \"Pending\";\n  createdAt?: number;\n}\n\nexport interface TodoItemProps extends ITodoItem {\n  handleDone: (id: string) => any;\n  handleRemove: (id: string) => any;\n}\n\nconst TodoItem: FC<TodoItemProps> = ({\n  id,\n  description,\n  status,\n  createdAt,\n  handleDone,\n  handleRemove,\n}) => {\n  return (\n    <div className=\"toDoItem-container\">\n      <div className={`flex space-x-4 ... ${status === 'Done' ? \"completed\" : ''}`}>\n        <div className=\"flex-1 ...\" >\n          <div className=\"flex flex-row ...\" style={{ paddingTop: \"1em\" }}>\n            {/* <div>{id}</div> */}\n            <div>\n              {status === \"Done\" ? <CheckCircleTwoTone style={{ marginRight: \"1em\", fontSize: '2em', color: '#10b981' }} /> : null}\n            </div>\n            <div className=\"todo-description\">Description: {description}</div>\n          </div>\n        </div>\n        <div className=\"flex-2 ...\">\n          <div className=\"inline-block ...\">\n            {status === \"Pending\" ? <button\n              type=\"button\"\n              className=\"border border-green-500 text-green-500 rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:text-white hover:bg-green-600 focus:outline-none focus:shadow-outline\"\n              onClick={() => {\n                handleDone(id);\n              }}\n            >\n              Mark as Done\n          </button>\n              : null}\n          </div>\n          <div className=\"inline-block ...\">\n            <button\n              type=\"button\"\n              className=\"border border-red-500 text-red-500 rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:text-white hover:bg-red-600 focus:outline-none focus:shadow-outline\"\n              // icon={<DeleteOutlined />}\n              // className=\"todo-action-button\"\n              onClick={() => {\n                handleRemove(id);\n              }}\n            >\n              {/* <CloseCircleFilled /> */}\n              Remove\n          </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import { Button, Input, List } from \"antd\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport TodoForm from \"../../atoms/TodoForm\";\nimport TodoItem, { ITodoItem } from \"../../atoms/TodoItem\";\n\nexport interface TodoAppProps { }\n\nconst TodoApp: FC<TodoAppProps> = ({ }) => {\n  const [counter, setCounter] = useState(1);\n  const [todoList, setTodoList] = useState<ITodoItem[]>([]);\n\n  const onDone = (itemId: string) => {\n    const tempList = todoList.map((item) => {\n      if (item.id === itemId) item.status = \"Done\";\n      return item;\n    });\n    setTodoList([...tempList]);\n  };\n\n  const onRemove = (itemId: string) => {\n    const tempList = todoList.filter((item) => {\n      return item.id !== itemId;\n    });\n    setTodoList([...tempList]);\n  };\n\n  const onAdd = (description: string) => {\n    const tempItem: ITodoItem = {\n      id: counter.toString(),\n      description: description,\n      status: \"Pending\",\n    };\n    setTodoList([...todoList, tempItem]);\n    setCounter(counter + 1);\n  };\n\n  return (\n    <div className=\"todoContainer\" >\n      <h1 className=\"mb-20 mt-3 text-5xl text-teal-600 underline font-mono text-lg\">TODO App</h1>\n      <TodoForm handleAdd={onAdd} />\n      {todoList.map((todoItem, index) => {\n        return (\n          <TodoItem\n            key={index}\n            id={todoItem.id}\n            description={todoItem.description}\n            status={todoItem.status}\n            createdAt={todoItem.createdAt}\n            handleDone={onDone}\n            handleRemove={onRemove}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TodoApp;\n","import React from \"react\";\nimport TodoApp from \"./components/pages/TodoPage\";\nimport './App.css';\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}